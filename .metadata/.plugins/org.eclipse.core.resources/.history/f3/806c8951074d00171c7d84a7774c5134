import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class Top4_10 {
	public static class TopProdMapper  extends Mapper<LongWritable,Text,Text,LongWritable>
	 {
		public void map(LongWritable k,Text v, Context con) throws IOException, InterruptedException {
			String [] arr= v.toString().split(";");
			String Prod_Id=arr[5];
			long sales = Long.parseLong(arr[8]);
			
			con.write(new Text(Prod_Id),new LongWritable(sales));
		}
	 }

	public static class TopProdReducer extends Reducer<Text,LongWritable,NullWritable,Text>{
		private TreeMap<Long,Text> rep = new TreeMap<Long,Text>();
		
		public void reduce(Text key,Iterable<LongWritable> val, Context con){
			 long sum=0;
			 String value="";
			 String Mysum="";
			 
			 for(LongWritable values:val){
				 sum+=values.get();
			 }
			 value=key.toString();
			 value=String.format("%d", sum);
			 value=value +','+ Mysum;
			 
			 rep.put(new Long(sum),new Text(value));
			 
			 if(rep.size()>4){
				 rep.remove(rep.firstKey());
				 
			 }
					 
		}
		
		protected void cleanup(Context con) throws IOException,InterruptedException{
			for(Text t : rep.descendingMap().values()){
				con.write(NullWritable.get(), t);
			}
		}
		}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		

		 Configuration conf = new Configuration();
		 Job job = Job.getInstance(conf, "Top4_10");
		    job.setJarByClass(Top4_10.class);
		    job.setMapperClass(TopProdMapper.class);
		    job.setReducerClass(TopProdReducer.class);
		    
		    job.setMapOutputKeyClass(Text.class);
		    job.setMapOutputValueClass(LongWritable.class);
		    
		    job.setOutputKeyClass(NullWritable.class);
		    job.setOutputValueClass(Text.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);

		
	}

}
