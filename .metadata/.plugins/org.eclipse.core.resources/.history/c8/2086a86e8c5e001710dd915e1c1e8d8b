import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class Question1a {
	
	public static class MapperEx extends Mapper<LongWritable,Text,Text,IntWritable>
		{
		
		public void map(LongWritable k,Text v, Context con) throws IOException, InterruptedException{
			
			String Line =v.toString();
			String[] arr =Line.split("\t");
			
			String SOC= arr[3];
			String Job_Title= arr[4];
			int count=0;
			if(Job_Title.contains("DATA SCIENTIST")){
				count++;
			
			con.write(new Text(SOC),new IntWritable(count));
			}
		}
			
		}

	public static class ReducerEx extends Reducer<Text,IntWritable,NullWritable,Text>{
		/*int max_job =0;
		String Industry="";
		
		public void reduce(Text key,Iterable<IntWritable> values, Context con) {
			
			int count=0;

				for(IntWritable val:values)
				{
					count+=val.get();

					if (max_job < count){
						max_job=count;
						
						Industry=key.toString();
					}
				
			}
			}

			public void cleanup(Context con) throws IOException, InterruptedException{
				
				con.write(new Text(Industry),new IntWritable(max_job));
			}

		}
			*/
		private TreeMap<Integer, Text> topind = new TreeMap<>();
		//private IntWritable result=new IntWritable();
		public void reduce(Text key, Iterable<IntWritable> value, Context context) throws IOException, InterruptedException{
			int sum=0;
			
			for (IntWritable val:value){
				sum+=val.get();
			}
			String output = key.toString()+ ","+sum;
			topind.put(sum, new Text(output));
			if(topind.size()>1)
			{
				topind.remove(topind.firstKey());
			}
		}
			
		protected void	cleanup(Context context) throws IOException, InterruptedException{
				for(Text top :topind.values()){
					context.write(NullWritable.get(),top);
				}
	}

	}
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Q1a");
		job.setJarByClass(Question1a.class);
		job.setMapperClass(MapperEx.class);
		job.setReducerClass(ReducerEx.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);

	}

}
