import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class Question9 {
	
	public static class MapperEx extends Mapper<LongWritable, Text, Text, IntWritable> {

	
		public void map(LongWritable key, Text value, Context con)throws IOException, InterruptedException {
			String Line = value.toString();
			String[] arr =Line.split("\t");
			String case_status = arr[1];
			String employer_name = arr[2];
			//String application = (arr[6]);
			int count=0;
			if (case_status.equals("CERTIFIED") || case_status.equals("CERTIFIED-WITHDRWAN")) {
				count++;
				con.write(new Text(employer_name), new IntWritable(count));
			}
		}
		}


		public static class ReducerEx extends Reducer<Text, IntWritable, NullWritable, Text> {
	
			private TreeMap<Long, Text> rep = new TreeMap<Long, Text>();

			public void reduce(Text key, Iterable<IntWritable> values,Context context) throws IOException, InterruptedException {
				int count =0;
				int sum = 0;
				for (IntWritable val : values) {
					sum = sum + val.get();
					count++;
				}
				count++;
				
				long per = (sum/count)*100;
				
				if(per >= 70 && count >= 1000){
					
					String myValue = key.toString();
					
					myValue = myValue + ',' + sum+ ','+per;
					
					rep.put(new Long(per), new Text(myValue));
				}
		
				//String mytotal = String.format("%d", sum);
		
				

		
		//if (rep.size() > 10) {
			//rep.remove(rep.firstKey());
		}
	

	protected void cleanup(Context context) throws IOException,
			InterruptedException {
		for (Text t : rep.descendingMap().values()) {
			context.write(NullWritable.get(), t);
		}
	}
}

	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Q9");
		job.setJarByClass(Question9.class);
		job.setMapperClass(MapperEx.class);

		job.setReducerClass(ReducerEx.class);

		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
		job.setOutputKeyClass(NullWritable.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);

	}

}
