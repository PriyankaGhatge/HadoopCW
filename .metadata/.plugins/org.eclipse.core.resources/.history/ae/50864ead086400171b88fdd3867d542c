import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;


public class Question5a {

	public static class MapperEx extends Mapper<LongWritable, Text, Text, Text> {


		public void map(LongWritable key, Text value, Context con)throws IOException, InterruptedException {

			String Line = value.toString();
			String[] arr =Line.split("\t");
			String Petitions = arr[3];
			String job_title = arr[2];
			String year= arr[7];


			con.write(new Text(job_title+'\t'+year), new Text(Petitions));

		}
	}

	public static class PartitionerEx extends Partitioner<Text, Text> {

		@Override
		public int getPartition(Text key, Text value, int numReduceTasks) {

			String[] rec = key.toString().split("\t");
			String year = rec[0];
			if (year.equals("2011")) {
				return 0;
			} else if (year.equals("2012")) {
				return 1;
			} else if (year.equals("2013")) {
				return 2;
			} else if (year.equals("2014")) {
				return 3;
			} else if (year.equals("2015")) {
				return 4;
			} else {
				return 5;
			}
		}
	}

	public static class ReducerEx extends Reducer<Text, Text, NullWritable, Text> {
		private TreeMap<Long, Text> rep = new TreeMap<Long, Text>();

		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {

			int count = 0;
			for (Text val : values) {
				count++;
			}


			String myValue = key.toString();
			myValue = myValue + ',' + count;

			rep.put(new Long(count), new Text(myValue));
			if (rep.size() > 10) {
				rep.remove(rep.firstKey());
			}
		}

		protected void cleanup(Context context) throws IOException,
		InterruptedException {
			for (Text t : rep.values()) {
				context.write(NullWritable.get(), t);
			}
		}
	}
	

	public static void main(String[] args) {


	}

}
